demoFL
======


This document outlines the step-by-step workflow for the analysis of follicular lymphoma using the `dds_analysis` package. Each step is described along with the corresponding bash code.

Set variable paths:
-------------------
The following code sets variable paths. User can adjust this code according to their files and folders.

.. code-block:: bash

    #path of main input data folder
    IN_FOLDER='../../data/fl_12samples/in_data/'

    #a) Path of mutation blocks and block summary files exported by bpb3 package
    IN_BLOCKS=${IN_FOLDER}'/bpb3_demo3_fl_cohort_small/out/mussd_blocks/'
    IN_BLOCK_SUMMARY='blocks_summary.tsv'
    #Path of mutation blocks with patient ID will be exported later by  dds_analysis find_block_patientID

    #convert bpb3 predicted mutation block summary file to bed format file with positions. This is done by bpb3summary_format
    dds_analysis bpb3summary2bed_format --in_block_summary_file ${IN_BLOCKS}/$IN_BLOCK_SUMMARY
    echo  ${IN_BLOCKS}'/'${IN_BLOCK_SUMMARY}
    echo "preprocess_data - Done"

    #make file name of the bed format of block summary file that will be used in the rest of analysis
    replace='_block_position.bed'
    finds='.tsv'
    IN_BLOCK_FILE=${IN_BLOCK_SUMMARY//$finds/$replace}

    #b) Path of predicted DMRs/MRs from "dmr_analysis"
    IN_GENOME_REGIONS=${IN_FOLDER}'/final_demo_data/fl_12samples/out_data/DMR_CpG_context/'
    #a list of predefined genomic regions that will be used to map mutation blocks.
    #This file is generated by dmr_analysis dmr_gene_annotation but user has to double check the location of files in this list if you need to add enhancer or other genomic region files
    IN_LIST_REGIONS='list_region_files.txt'
    #c) Path to refFlat gene annotation file that generated by hmst-seq-analyzer
    IN_GENOME_refFlat=${IN_GENOME_REGIONS}'/data/hg19.refFlat_clean_sorted.bed'

    #d) Path of other genomic information files such as TAD,  chromatin segmentant, and genome files et al
    IN_GENOME_LIB='../../data/'
    #path of chromatin segment files that will be used to intersect with mutation blocks
    IN_CHROMSEG=${IN_GENOME_LIB}'/chromSegment/hg19/'

    #e) Path of TAD information that will be used to map mutation blocks
    IN_TAD=${IN_GENOME_LIB}'/in_tad/'

    #f) Path to gene position file in sorted bed format which is generated by hmst-seq-analyzer
    IN_GENE_POSITION=${IN_TAD}'/out/data/gene_Up1_Down1removedShort.bed'

    #g) Path to common TAD positions across 5 human cell lines
    IN_TAD_INFO=${IN_TAD}'/Table4_TAD_annotations_sorted_chr.bed'
    #path to common TAD boundary position among 5 human cell lines
    IN_TAD_BOUNDARY=${IN_TAD}'/Table1_common_boundaries_merged_sorted_chr.bed'

    #Path of differentially methylated regions, differentially expressed genes, and output folder of mutation blocks mapped to predefined genomic regions.
    #h) Path to DMRs predicted and ranked by dmr_analysis
    IN_DMR=${IN_GENOME_REGIONS}'/2_chroms_all_mr_data_range_dmrRanking.bed'

    #i) path to DEG genes exported from bpb3 package
    IN_EXPRESS=${IN_FOLDER}'/bpb3_demo3_fl_cohort_small/out/differentially_expressed_genes.txt'

    #Try to add N bp flank region on the two sides of mutation blocks before intersecting them with DMRs
    FLANK_BP=0

    ###---OUTPUT PATH
    # path of main output data folder
    OUT_FOLDER='../../data/fl_12samples/out_data/'

    #path for exporting mutation blocks mapped to predefined genomic regions
    OUT_GENOME=${OUT_FOLDER}'/out_genome/'
    #path for exporting mutation blocks mapped to chromatin segmentations
    OUT_CHROMSEG=${OUT_FOLDER}'/out_chromSegment/'
    #path for exported mutation blocks associated with DEGs
    OUT_EXPRESS=${OUT_FOLDER}'/out_expression/'
    #path for final results that mutation blocks associated with DMR, DEG and TAD
    OUT_FINAL=${OUT_FOLDER}/'out_DmrDeg2block'

Step 1: Map mutation blocks to genomic regions
----------------------------------------------

The `map_block2genome` module from the `dds_analysis` package is used to map mutation blocks to predefined genomic regions.

.. code-block:: bash

   dds_analysis map_block2genome --in_sortedBlock_file $IN_BLOCK_FILE --in_genomicRegion_file $GENOMIC_REGION_FILE --in_reference_genome $REFERENCE_GENOME_FILE --out_folder $OUTPUT_FOLDER

Step 2: Map mutation blocks to chromatin segments
-------------------------------------------------

The `map_block2chromSegment` module from the `dds_analysis` package is used to map mutation blocks to chromatin segments.

.. code-block:: bash

   dds_analysis map_block2chromSegment --in_sortedBlock_file $IN_BLOCK_FILE --in_chromatinSegment_folder $CHROMATIN_SEGMENT_FOLDER --out_folder $OUTPUT_FOLDER

Step 3: Map mutation blocks to differentially methylated regions (DMRs)
-----------------------------------------------------------------------

The `map_block2dmr` module from the `dds_analysis` package is used to map mutation blocks to DMRs after adding flank regions.

.. code-block:: bash

   dds_analysis map_block2dmr --in_sortedBlock_file $IN_BLOCK_FILE --in_dmr_file $DMR_FILE --flank_region_size $FLANK_REGION_SIZE --out_folder $OUTPUT_FOLDER

Step 4: Combine genomic regions with mutation block information and find differentially expressed genes
-------------------------------------------------------------------------------------------------------

The `find_geneExp4block` module from the `dds_analysis` package is used to combine genomic regions with mutation block information and identify differentially expressed genes.

.. code-block:: bash

   dds_analysis find_geneExp4block --in_blocks_genome_folder $BLOCKS_GENOME_FOLDER --in_sortedBlock_file $IN_BLOCK_FILE --in_de_genes_file $DE_GENES_FILE --in_feature_list $FEATURE_LIST --out_folder $OUTPUT_FOLDER

Step 5: Find patient IDs for each mutation block
------------------------------------------------

The `find_block_patientID` module from the `dds_analysis` package is used to find patient IDs associated with each mutation block.

.. code-block:: bash

   dds_analysis find_block_patientID --in_block_summary_file $BLOCK_SUMMARY_FILE --in_block_folder $BLOCK_FOLDER

Step 6: Combine DMRs, differentially expressed genes (DEGs), and mutation block information
-------------------------------------------------------------------------------------------

The `combine_dmr_deg2block` module from the `dds_analysis` package is used to combine DMRs, DEGs, and mutation block information.

.. code-block:: bash

   dds_analysis combine_dmr_deg2block --in_sortedBlock_patient_file $SORTED_BLOCK_PATIENT_FILE --in_dmr_file $DMR_FILE --in_deg_folder $DEG_FOLDER --deg_file_suffix $DEG_FILE_SUFFIX --out_folder $OUTPUT_FOLDER

Step 7: Filter blocks based on DMR or DEG information
-----------------------------------------------------

The `filter_blocks` module from the `dds_analysis` package is used to filter blocks based on DMR or DEG information.

.. code-block:: bash

   dds_analysis filter_blocks --in_combined_dmr_deg_block_file $COMBINED_DMR_DEG_BLOCK_FILE

Step 8: Collect unique gene names from predicted blocks after filtering
-----------------------------------------------------------------------

The `collect_gene_names4blocks` module from the `dds_analysis` package is used to collect unique gene names from predicted blocks.

.. code-block:: bash
    dds_analysis collect_gene_names4blocks --in_filtered_block_file $FILTERED_BLOCK_FILE --out_gene_file $GENE_FILE

Step 9: Perform gene expression analysis for selected genes
-----------------------------------------------------------

The `gene_expression_analysis` module from the `dds_analysis` package is used to perform gene expression analysis for selected genes.

.. code-block:: bash

   dds_analysis gene_expression_analysis --in_gene_file $GENE_FILE --in_expression_file $EXPRESSION_FILE --out_folder $OUTPUT_FOLDER

Step 10: Perform functional enrichment analysis for selected genes
------------------------------------------------------------------

The `functional_enrichment_analysis` module from the `dds_analysis` package is used to perform functional enrichment analysis for selected genes.

.. code-block:: bash

   dds_analysis functional_enrichment_analysis --in_gene_file $GENE_FILE --in_annotation_file $ANNOTATION_FILE --out_folder $OUTPUT_FOLDER

Step 11: Find enhancer target genes
-----------------------------------

The `find_enhancer_target_genes` module from the `dds_analysis` package is used to find enhancer target genes by overlapping predicted enhancers with selected mutation blocks and a predicted target gene.

.. code-block:: bash

   dds_analysis find_enhancer_target_genes --in_enhancer_folder $ENHANCER_FOLDER --in_dds_file $DDS_FILE --in_gene_file $GENE_FILE --out_folder $OUTPUT_FOLDER

