#this script is used to check whther the block/gene/ in the same TAD or boundariy 
import pandas as pd
import numpy as np
import os
from .script_high.check_block_dist_gene_in_TAD2 import find_TADorBoundary_for_genes
#import check_block_dist_gene_in_TAD2 as ck_bdg_in_tad
import argparse
#exec(open('check_block_gene_inTAD.py').read())

def my_parser(parser):
  required= parser.add_argument_group('Required')
  required.add_argument('-in_BGfile','--in_filtered_blockUqGene_file',required=True,
                    help='Input filtered block and gene information file with unique gene name that is exported by dds_analysis collect_gene_names4blocks')
  required.add_argument('-in_GPfile','--in_gene_position_file', required=True, 
                    help='Input gene position file, a bed format file indicates all genes start position and end position, which can be generated by hmst-seq-analyzer by using refFlat file ')
  required.add_argument('-in_TPfile','--in_TAD_position_file', required=True, 
                    help='Input Topologically Associating Domain (TAD) position file, a bed format file describes each TAD start and end position which is sorted by chromosome position')
  required.add_argument('-in_TBfile','--in_TAD_boundary_file', required=True, 
                    help='Input Topologically Associating Domain (TAD) boundary file, a bed format file indicates each TAD boundary start and end position which is sorted by chromoeome position ')  
  return parser

def run(args):
 in_block_gene_file=args.in_filtered_blockUqGene_file
 in_gene_pos_file=args.in_gene_position_file
 in_tad_pos_file=args.in_TAD_position_file
 in_boundary_pos_file=args.in_TAD_boundary_file
 
 print("Start to evalute whether the blocks and the corresponding assigned genes are located in the same TAD? ")
 print("In filtered block unique gene information file: ", in_block_gene_file)
 print("In gene position file: ", in_gene_pos_file)
 print("In TAD position file: ", in_tad_pos_file)
 print("In TAD boundary file: ", in_boundary_pos_file)

 #minimum 2 pateints
 #in_block_gene_file='out_blocks_gene/blocks_summary_sorted_500flank_0.7Proba_176blocks_73blocks2mr_30blocks2dmr_deg_info_filtered_DMR_and_DEG_uniqGene.tsv'
 #in_block_gene_file='out_blocks_gene/blocks_summary_sorted_500flank_0.7Proba_176blocks_73blocks2mr_30blocks2dmr_deg_info_filtered_DMR_or_DEG_uniqGene.tsv'

 #minimum 1 pateint
 #in_block_gene_file='out_blocks_gene_single/blocks_summary_block_position_500flank_0.7Proba_66868blocks_28049blocks2mr_9478blocks2dmr_deg_info_filtered_DMR_and_DEG_uniqGene.tsv'
 #in_block_gene_file='out_blocks_gene_single/blocks_summary_block_position_500flank_0.7Proba_66868blocks_28049blocks2mr_9478blocks2dmr_deg_info_filtered_DMR_or_DEG_uniqGene.tsv'

 #INPUT 1
 #in_block_gene_file='out_blocks_gene_single_may/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_and_DEG_uniqGene.tsv'
 #in_block_gene_file='out_blocks_gene_single_may/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_or_DEG_uniqGene.tsv'
 in_block_gene_df=pd.read_csv(in_block_gene_file,sep='\t')

 #INPUT 2
 #this file is only for enhancer purpose?
 #in_block_file='out_blocks_gene_single/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_and_DEG.tsv'
 #in_block_file='out_blocks_gene_single/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_or_DEG.tsv'
 #in_block_df=pd.read_csv(in_block_file,sep='\t')

 #convert file format to check_block_dist_gene_in_TAD2
 expanded_in_block_gene_df=pd.DataFrame(columns=in_block_gene_df.columns)
 loop=0 

 for idx, row in in_block_gene_df.iterrows():
     new_patients=row.patients.split('~')
     new_gene_name=[row.gene_name]*len(new_patients)
     new_gene_type=row.gene_type.split('~')
     new_block_id=row.block_id.split('~')
     if isinstance(row.new_mr_sites,str):
        new_mr_sites=row.new_mr_sites.split('~')
     else:
        new_mr_sites=str(row.new_mr_sites).split('~')
     new_patient_id=row.patient_id.split('~')
     new_enhancers=str(row.enhancers).split('~')
     for i in range(0,len(new_patients)):
         expanded_in_block_gene_df.loc[loop,['gene_name','patients','gene_type','block_id','new_mr_sites','patient_id','enhancers']]= [new_gene_name[i],new_patients[i],new_gene_type[i],new_block_id[i],new_mr_sites[i],new_patient_id[i],new_enhancers[i]]
         loop +=1 

 #input TAD, gene boundary position
 #in_gene_pos_file='genome_data/in_tad/gene_Up1000_Down1000removedShort_adjustedChrs.bed'
 #in_tad_pos_file='genome_data/in_tad/Table4_TAD_annotations_sorted.bed'
 #in_boundary_pos_file='genome_data/in_tad/Table1_common_boundaries_merged_sorted.bed'

 in_gene_pos_df=pd.read_csv(in_gene_pos_file, sep='\t',header=None)
 in_gene_pos_df.columns=['chrs','start_pos','end_pos','name']
 #remove chr in chrs
 in_gene_pos_df['chrs']=in_gene_pos_df['chrs'].apply(lambda x: x.replace('chr','') )

 in_tad_pos_df=pd.read_csv(in_tad_pos_file,sep='\t',header=None)
 in_tad_pos_df.columns=['chrs','start_pos','end_pos','chrom_type','tad_length']
 in_tad_pos_df['chrs']=in_tad_pos_df['chrs'].apply(lambda x: x.replace('chr',''))

 in_boundary_df=pd.read_csv(in_boundary_pos_file,sep='\t',header=None)
 in_boundary_df.columns=['chrs','start_pos','end_pos','name','length']
 in_boundary_df['chrs']=in_boundary_df['chrs'].apply(lambda x: x.replace('chr',''))


 #check TAD
 min_overlap=1e-9
 #isTAD=-1,0,1,2,not find, not same TAD, same TAD, same TAD boundary
 expanded_in_block_gene_df, out_file_name=find_TADorBoundary_for_genes(in_block_gene_file,expanded_in_block_gene_df,in_gene_pos_df,in_tad_pos_df,in_boundary_df,min_overlap)

 tmp_gene_df=expanded_in_block_gene_df.loc[expanded_in_block_gene_df.isTAD>0,['gene_name','gene_type','block_id','isTAD','new_mr_sites','patients','patient_id','enhancers']].copy()
 #tmp_gene_df=tmp_gene_df.sort_values(by='gene_name').drop_duplicates(['gene_name','gene_type'])
 if '.tsv' in in_block_gene_file:
   out_file2=in_block_gene_file.replace('.tsv','_commonTAD_Boundary_list.tsv')
 elif '.csv' in in_block_gene_file:
   out_file2=in_block_gene_file.replace('.tsv','_commonTAD_Boundary_list.tsv')

 print("Export genes in common TAD at: ")
 tmp_gene_df.to_csv(out_file2,sep='\t',index=False)
 print(out_file2)

 #combine duplicated gene record into the same row
 tmp_grouped=tmp_gene_df.groupby(['gene_name'])
 tmp_result2= tmp_grouped.agg({ 'gene_type': lambda x:    '~'.join(tuple(list((x.astype(str).tolist())))),
                               'block_id': lambda x:     '~'.join(tuple(list((x.astype(str).tolist())))), 
                               'new_mr_sites': lambda x: '~'.join(tuple(list((x.astype(str).tolist())))) ,
                               'patients':     lambda x: '~'.join(tuple(list((x.astype(str).tolist())))),
                               'patient_id':   lambda x: '~'.join(tuple(list((x.astype(str).tolist())))),
                               'enhancers': lambda x: '~'.join(tuple(list((x.astype(str).to_list())))),
                               'isTAD': lambda x: '~'.join(tuple(list(x.astype(str).tolist()))) } )
 tmp_result2=tmp_result2.reset_index()
 out_file3=out_file2.replace('_list.tsv','_list2UqGene.tsv')
 #tmp_result2.to_csv(out_file3,sep='\t',index=False)

 #load enhancer information
 #in_block_file='out_blocks_gene/blocks_summary_sorted_500flank_0.7Proba_176blocks_73blocks2mr_30blocks2dmr_deg_info_filtered_DMR_and_DEG.tsv'
 #in_block_file='out_blocks_gene_single/blocks_summary_block_position_500flank_0.7Proba_66868blocks_28049blocks2mr_9478blocks2dmr_deg_info_filtered_DMR_and_DEG.tsv'

 #INPUT 2
 #in_block_file='out_blocks_gene_single/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_and_DEG.tsv'
 #in_block_file='out_blocks_gene_single/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_or_DEG.tsv'
 #in_block_df=pd.read_csv(in_block_file,sep='\t')

 #for each block id find its enhancer information
 #record_enhancer=[]
 #for idx,row in tmp_result2.iterrows():
 #   tmp_block_id=row.block_id.split('~')
 #   tmp_enhancer=[]
 #   for tb in tmp_block_id:
 #     tmp_enhancer +=in_block_df.enhancers[in_block_df.block_id==tb ].astype(str).to_list()
 #   #print(tmp_enhancer)
 #   record_enhancer.append('~'.join(tmp_enhancer))
 #tmp_result2['enhancers']=record_enhancer
 print("Export unqiue gene in common TAD at: ")
 print(out_file3)
 tmp_result2=tmp_result2[['gene_name','gene_type','block_id','new_mr_sites','patients','isTAD','enhancers','patient_id']]
 tmp_result2.to_csv(out_file3,sep='\t',index=False)


if __name__== '__main__':
 args=my_parser(argparse.ArgumentParser('python check_block_gene_inTAD.py')).parse_args()
 run(args)





