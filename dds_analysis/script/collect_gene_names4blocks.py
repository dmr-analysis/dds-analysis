#this script is used to collect unique genes name from predicted blocks with DMR and DEG
import pandas as pd
import os
import argparse
#exec(open('collect_gene_names4blocks.py').read())

def my_parser(parser):
    required= parser.add_argument_group('Required')
    required.add_argument('-in_BGfile','--in_filtered_blockGene_file',required=True, help="input file of filtered block gene infomration that is exported by dds_analysis filter_blocks")
    return parser

def run(args):
 #minimum 2 pateints
 #in_block_gene_file='out_blocks_gene/blocks_summary_sorted_500flank_0.7Proba_176blocks_73blocks2mr_30blocks2dmr_deg_info_filtered_DMR_and_DEG.tsv'
 #in_block_gene_file='out_blocks_gene/blocks_summary_sorted_500flank_0.7Proba_176blocks_73blocks2mr_30blocks2dmr_deg_info_filtered_DMR_or_DEG.tsv'

 #minimum 1 patient
 #in_block_gene_file='out_blocks_gene_single/blocks_summary_block_position_500flank_0.7Proba_66868blocks_28049blocks2mr_9478blocks2dmr_deg_info_filtered_DMR_and_DEG.tsv'
 #in_block_gene_file='out_blocks_gene_single/blocks_summary_block_position_500flank_0.7Proba_66868blocks_28049blocks2mr_9478blocks2dmr_deg_info_filtered_DMR_or_DEG.tsv'

 #in_block_gene_file='out_blocks_gene_single/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_and_DEG.tsv'
 #in_block_gene_file='out_blocks_gene_single/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_or_DEG.tsv'

 #in_block_gene_file='out_blocks_gene_single_may/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_or_DEG.tsv'
 #in_block_gene_file='out_blocks_gene_single_may/blocks_summary_block_position_0flank_0.7Proba_66868blocks_13143blocks2mr_4604blocks2dmr_deg_info_filtered_DMR_and_DEG.tsv'
 
 in_block_gene_file=args.in_filtered_blockGene_file
 in_block_gene_df=pd.read_csv(in_block_gene_file,sep='\t',low_memory=False)

 print("Start to extract unique gene name from filtered block gene information file that is generated by filter_blocks")
 print("In filtered block gene file: ",  in_block_gene_file)
 #feature name needs to add prefix string
 features=['TSS','TES','gene','5dist']
 prefix2feature='filtered_'

 #gene to feature/block dictionary
 gene2features={}
 gene2blocks={}
 gene2dmr={}
 gene2patient={}
 gene2patient_id={}
 gene2enhancers={}

 for idx, rows in in_block_gene_df.iterrows():
     tmp_rows=rows[~rows.isnull()].copy()
   
     #from each feature find gene name 
     for fe in features:
       #if fe.count('enhancer')>0:
       #    tmp_idx=tmp_rows.index.str.contains(fe)
       #else:
       tmp_idx=tmp_rows.index.str.contains(prefix2feature+fe)
       tmp_name=tmp_rows.index[tmp_idx]
       tmp_val=tmp_rows.values[tmp_idx]

       #find gene in the row
       if tmp_name.size>0:
         #print(tmp_name,tmp_val)
         tmp_feature=tmp_name[0].replace(prefix2feature,'')
         tmp_genes=tmp_val[0].split(',')
         #if tmp_feature.count('enhancer')>0:
         #       print(tmp_feature, tmp_genes)
        
         if tmp_rows.get('enhancers') != None :    
             tmp_enhancers=['enhancer']*len(tmp_genes) # tmp_rows.enhancers.split(',')
         else:
             tmp_enhancers=['nan']*len(tmp_genes)
         loop =0
         #for each gene updata its feature,  blocks, dmr, patient
         for gene in tmp_genes:
             if gene not in gene2features.keys():
                gene2features[gene]=[tmp_feature]
             else:
                gene2features[gene].append(tmp_feature)

             if gene not in gene2blocks.keys():
                gene2blocks[gene]=[tmp_rows.block_id]
             else:
                gene2blocks[gene].append(tmp_rows.block_id)

             if gene not in gene2dmr.keys():
                if 'new_mr_sites' in tmp_rows.index.to_list():
                   gene2dmr[gene]=[tmp_rows.new_mr_sites]
                else:
                   gene2dmr[gene]=['nan']
             else:
                if 'new_mr_sites' in tmp_rows.index.to_list():
                   gene2dmr[gene].append(tmp_rows.new_mr_sites)
                else:
                   gene2dmr[gene].append('nan')

             if gene not in gene2patient.keys():
                gene2patient[gene]=[tmp_rows.number_of_patients]
             else:
                gene2patient[gene].append(tmp_rows.number_of_patients)

             if gene not in gene2patient_id.keys():
                gene2patient_id[gene]=[tmp_rows.patient_id]
             else:
                gene2patient_id[gene].append(tmp_rows.patient_id)
     
             #find enhancer for the genes
             if gene not in gene2enhancers.keys():
                gene2enhancers[gene]=[tmp_enhancers[loop]]
                loop +=1
             else:
                gene2enhancers[gene].append(tmp_enhancers[loop])
                loop +=1            

 #make a dataframe to export
 genes=[]
 features=[]
 blocks=[]
 dmrs=[]
 patients=[]
 patient_id=[]
 enhancers=[]

 for kk in gene2features.keys():
    genes.append(kk)
    features.append('~'.join(gene2features[kk]))
    blocks.append('~'.join(gene2blocks[kk]))
    dmrs.append('~'.join(gene2dmr[kk]))
    patients.append('~'.join([str(x) for x in gene2patient[kk]]))
    patient_id.append('~'.join(gene2patient_id[kk]))
    enhancers.append('~'.join(gene2enhancers[kk]))

 out_df=pd.DataFrame(columns=['gene_name','patients','gene_type','block_id','new_mr_sites','patient_id','enhancers'])
 out_df.gene_name=genes
 out_df.gene_type=features
 out_df.patients=patients
 out_df.block_id=blocks
 out_df.new_mr_sites=dmrs
 out_df.patient_id=patient_id
 out_df.enhancers=enhancers

 out_file=in_block_gene_file.replace('.tsv','_uniqGene.tsv')
 print("Export mutation block gene information file with unique gene name at: ")
 print(out_file)
 out_df.to_csv(out_file,sep='\t',index=False)


if __name__=='__main__':
 args=my_parser(argparse.ArgumentParser('python collect_gene_names4blocks.py ')).parse_args()
 run(args)

